use std::str::FromStr;
use crate::ast::AST;

grammar;

pub Exprs: Vec<AST> = {
        <l:(<Expr>)*> => l,
};

Expr: AST = { Comment? <ExprClean> };

ExprClean: AST = {
    // Match combined exprs
    "(" <e:Exprs> ")" => AST::List(e),
    // Match null literal
    "null" => AST::Null,
    // Match numbers
    <n:Num> => AST::Int(n),
    // Match strings
    <s:r#""(?:[^"\\]|\\.)*""#> => {AST::Str(s[1..(s.len() - 1)].to_owned())},
    // Match all tokens
    <t:Term> => AST::Ident(t),
}

// Match tokens
// FIXME: Is this correct?
Term: String = { <t:r#"[A-Za-z_?+*/.=<>-]+[0-9A-Za-z_?+*/.=<>-]*"#> => (t).to_owned() };

// Match integers
Num: isize = {
    <n:r"[0-9]+"> => isize::from_str(n).unwrap()
};

// Discard comments
Comment: () = {
    // Block comments
    r#"#\|([^#])*\|#"# => {},
    // Line comments
    r#";.*\n"# => {},
}
